* General
Refresh packages
#+BEGIN_SRC emacs-lisp
(package-refresh-contents)
#+END_SRC

Kill ring memory and connection to system clipboard
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  ;; Pressing <f5 reloads the current buffer
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;; Trailing whitespace
  (setq-default show-trailing-whitespace t)

#+END_SRC

Encoding settings [[http://ergoemacs.org/emacs/emacs_n_unicode.html][link]]
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

Tabs [[https://www.emacswiki.org/emacs/NoTabs][no tabs]]
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Try out packages without installing them
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

Bring up help on key combinations
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC

Generate dummy lorem-ipsum text
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC

Emoji support
#+BEGIN_SRC emacs-lisp
  (use-package emojify
    :ensure t)
;;  (add-hook 'after-init-hook #'global-emojify-mode)
#+END_SRC

* Navigation and search

Window navigation with =ace-window=
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 2.0))))) 
      ))
#+END_SRC

Advanced incremental and reverse search using =swiper= and =counsel=. [[https://cestlaz-nikola.github.io/posts/using-emacs-6-swiper/][link to tutorial]].
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-y". counsel-yank-pop) :map ivy-minibuffer-map ("M-y". ivy-next-line)))

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

#+RESULTS:
: t

Jump to character. [[https://cestlaz-nikola.github.io/posts/using-emacs-7-avy/][Navigation with Avy]]
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

* File manager

[[https://cestlaz-nikola.github.io/posts/using-emacs-38-dired/][Tutorial to for dired]]
#+BEGIN_SRC emacs-lisp
;  (use-package dired+
;    :ensure t
;    :config (require 'dired+))
#+END_SRC

* Editing, autocomplete and spellchecking

Interactive edit. [[https://cestlaz-nikola.github.io/posts/using-emacs-18-narrow/][link to tutorial.]]
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t)
#+END_SRC

#+RESULTS:

Autocomplete package. [[https://cestlaz-nikola.github.io/posts/using-emacs-8-autocomplete/][link to tutorial]]
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)
      ))
#+END_SRC

Code checking on the fly with [[https://cestlaz-nikola.github.io/posts/using-emacs-12-python/][flycheck]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t
  :init
    (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t
  :init)

#+END_SRC

#+RESULTS:

* Looks

Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
#+END_SRC

Get rid of the tool and menu bars, scrollbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

#+RESULTS:

Display line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
#+END_SRC

Theme
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t)


  ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
  ;; may have their own settings.
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)

  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled

  ;; (let ((height (face-attribute 'default :height)))
  ;;   ;; for all linum/nlinum users
  ;;   (set-face-attribute 'linum nil :height height)
  ;;   ;; only for `linum-relative' users:
  ;;   (set-face-attribute 'linum-relative-current-face nil :height height)
  ;;   ;; only for `nlinum-relative' users:
  ;;   (set-face-attribute 'nlinum-relative-current-face nil :height height))

#+End_SRC

#+RESULTS:

* Git
Install =Magit= package
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

Some =Magit= keybinds
#+BEGIN_SRC emacs-lisp
;; To display information about the current Git repositor
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

* Org-mode settings
** Main
The last four lines define global keys for some commands — please
choose suitable keys yourself.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC

Multi-state workflows [[https://orgmode.org/guide/Multi_002dstate-workflows.html][link]]
#+BEGIN_SRC emacs-lisp
#+END_SRC

Add timestampt when a certain TODO item was marked DONE [[https://orgmode.org/manual/Closing-items.html][link]]
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

To get the nice looking bullets when in org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

Org-babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '(
   (R . t)
   (shell . t)
))
#+END_SRC


Org mode source blocks - no indentation
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC
** Org Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "To Do Item" entry (file+headline "~/Documents/org/p.org" "To Do Užduotys") "* TODO %?\n%T" :prepend t)
        ("n" "Note" entry (file+headline "~/Documents/org/p.org" "Užrašai") "* %?\n%T" :prepend t)))
#+END_SRC

#+RESULTS:
| t | To Do Item | entry | (file+headline ~/Documents/org/p.org To Do Užduotys) | * TODO %? |

* Better PDF support
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
 ;; :pin manual ;; manually update
 :config
 ;; initialise
 (pdf-tools-install)
 ;; open pdfs scaled to fit page
 (setq-default pdf-view-display-size 'fit-page)
 ;; automatically annotate highlights
 (setq pdf-annot-activate-created-annotations t))
#+END_SRC

#+RESULTS:
: t

* Language specific
** C++
   [[https://cestlaz-nikola.github.io/posts/using-emacs-32-cpp/][Tutorial to using cpp in emacs]]

#+BEGIN_SRC emacs-lisp
  ;; tags for code navigation
;;  (use-package ggtags
;;    :ensure t
;;    :config 
;;    (add-hook 'c-mode-common-hook
;;              (lambda ()
;;                (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
;;                  (ggtags-mode 1))))
;;    )
#+END_SRC

** R
   Emacs speaks statistics. [[https://ess.r-project.org/][Link]]
#+BEGIN_SRC emacs-lisp
  (use-package ess
    :ensure t
    :init)
  (use-package ess-R-data-view
    :ensure t
    :init)
  (use-package ess-smart-underscore
    :ensure t
    :init)
#+END_SRC

#+RESULTS:
: t

** Python
Default python interpreter *python3*
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

Using Python in emacs [[https://cestlaz-nikola.github.io/posts/using-emacs-12-python/][link]]
Jedi provides more extensive completion for Python.
#+BEGIN_SRC emacs-lisp

(use-package jedi
  :ensure t
  :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))

(use-package elpy
  :ensure t
  :init
  (elpy-enable))


(setq jedi:environment-root "jedi")  ; or any other name you like
(setq jedi:environment-virtualenv
      (append python-environment-virtualenv
              '("--python" "/usr/bin/python3")))
#+END_SRC

#+RESULTS:
| virtualenv | --system-site-packages | --quiet | --python | /usr/bin/python3 |

** Tex
   AUCTeX stuff [[https://piotr.is/2010/emacs-as-the-ultimate-latex-editor/][link to guide]]
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t
  :ensure t)

  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq TeX-PDF-mode t)
  ;(setq TeX-master nil)
#+END_SRC


** Ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1))

  (use-package flycheck-ledger
    :ensure t)
#+END_SRC

#+RESULTS:

** Text
#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
	    (id (one-or-more (not (any " "))))
	    (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

