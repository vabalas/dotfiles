* Init
** System check
For system specific settings
https://karl-voit.at/2017/02/11/my-system-is-foobar/
#+BEGIN_SRC emacs-lisp
;; Check if the hostname is crapbag (personal laptop)
(defun my-system-is-crapbag ()
  "Return true if the system we are running on is crapbag"
  (or
    (string-equal system-name "crapbag")
    (string-equal system-name "crapbag.lan")
    )
  )

;; Check if the hostname is tandy1000 (work laptop)
(defun my-system-is-tandy1000 ()
  "Return true if the system we are running on is tandy1000"
  (or
    (string-equal system-name "tandy1000")
    (string-equal system-name "tandy1000.lan")
    )
  )
#+END_SRC
* General
** Backups
#+BEGIN_SRC emacs-lisp
;; make backup to a designated dir, mirroring the full pat
(defun my-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
        (backupRootDir "~/.emacs.d/backup/")
        (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
        (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
        )
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath
  )
)

(setq make-backup-file-name-function 'my-backup-file-name)
#+END_SRC

** Package management
Refresh packages
#+BEGIN_SRC emacs-lisp
(package-refresh-contents)
#+END_SRC

https://github.com/raxod502/straight.el
#+BEGIN_SRC emacs-lisp
(when (my-system-is-crapbag)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "~/.emacs.d/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
)
#+END_SRC

Try out packages without installing them
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** Clipboard
Kill ring memory and connection to system clipboard
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

** Encoding, whitespace
Encoding settings [[http://ergoemacs.org/emacs/emacs_n_unicode.html][link]]
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

Tabs [[https://www.emacswiki.org/emacs/NoTabs][no tabs]]
#+BEGIN_SRC emacs-lisp
 (setq-default indent-tabs-mode t)
#+END_SRC

Whitespace mode
#+BEGIN_SRC emacs-lisp
(progn
 ;; Make whitespace-mode with very basic background coloring for whitespaces.
  ;; http://ergoemacs.org/emacs/whitespace-mode.html
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [9655 9] [92 9]) ; tab
          )))
#+END_SRC

** Help
Bring up help on key combinations
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  ;; Pressing <f5 reloads the current buffer
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;; Trailing whitespace
  (setq-default show-trailing-whitespace t)
#+END_SRC

Generate dummy lorem-ipsum text
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC
* Looks
** Misc
Highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode +1)
#+END_SRC

Highlight parens
#+BEGIN_SRC emacs-lisp
;; Enable paren highlighting
(show-paren-mode 1)

;; highlight brackets
;;(setq show-paren-style 'parenthesis)

;; highlight entire expression
;; (setq show-paren-style 'expression)

;; highlight brackets if visible, else entire expression
(setq show-paren-style 'mixed)
#+END_SRC

Get rid of the tool and menu bars, scrollbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp
(global-display-line-numbers-mode 1)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :ensure t)

(load-theme 'dracula-theme)
#+End_SRC

* Navigation and search
** Window navigation
=ace-window=
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 2.0)))))
      ))
#+END_SRC

** Search
Advanced incremental and reverse search using =swiper= and =counsel=. [[https://cestlaz-nikola.github.io/posts/using-emacs-6-swiper/][link to tutorial]].
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-y". counsel-yank-pop) :map ivy-minibuffer-map ("M-y". ivy-next-line)))

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

Jump to character. [[https://cestlaz-nikola.github.io/posts/using-emacs-7-avy/][Navigation with Avy]]
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

* Editing and spellcheck
** Autocomplete
Interactive edit. [[https://cestlaz-nikola.github.io/posts/using-emacs-18-narrow/][link to tutorial.]]
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t)
#+END_SRC

Company mode auto complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  ;; :init
  ;; (setq company-idle-delay nil  ; avoid auto completion popup, use TAB
  ;;                               ; to show it
  ;;       company-tooltip-align-annotations t)
  :hook (after-init . global-company-mode)
  :bind
  (:map prog-mode-map
        ("C-i" . company-indent-or-complete-common)
        ("C-M-i" . completion-at-point)))
#+END_SRC
** Check
Code checking on the fly with [[https://cestlaz-nikola.github.io/posts/using-emacs-12-python/][flycheck]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

** Snippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t)

;;(setq yas-snippet-dirs '("~/personal/resources/snippets"))

(yas-global-mode 1)
#+END_SRC

* Git
Install =Magit= package
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

Some =Magit= keybinds
#+BEGIN_SRC emacs-lisp
;; To display information about the current Git repositor
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

https://emacs.stackexchange.com/questions/43643/magit-how-to-show-differences-within-lines
#+BEGIN_SRC emacs-lisp
(setq magit-diff-refine-hunk (quote all))
#+END_SRC

* Dired
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-alh --color")
#+END_SRC

Dired sorting
#+BEGIN_SRC emacs-lisp
(defun dired-sort ()
  "Sort dired dir listing in different ways.
Prompt for a choice.
URL `http://ergoemacs.org/emacs/dired_sort.html'
Version 2018-12-23"
  (interactive)
  (let ($sort-by $arg)
    (setq $sort-by (ido-completing-read "Sort by:" '( "date" "size" "name" )))
    (cond
     ((equal $sort-by "name") (setq $arg "-Al "))
     ((equal $sort-by "date") (setq $arg "-Al -t"))
     ((equal $sort-by "size") (setq $arg "-Al -S"))
     ;; ((equal $sort-by "dir") (setq $arg "-Al --group-directories-first"))
     (t (error "logic error 09535" )))
    (dired-sort-other $arg )))
#+END_SRC

https://github.com/Fuco1/dired-hacks

Subtree view
#+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :ensure t
  :config
  (bind-keys :map dired-mode-map
             ("i" . dired-subtree-insert)
             (";" . dired-subtree-remove)))
#+END_SRC

Narrow
#+BEGIN_SRC emacs-lisp
(use-package dired-narrow
  :ensure t
  :config
  (bind-keys :map dired-mode-map
             ("n" . dired-narrow)))
#+END_SRC

* Language specific
** C/C++
*** Code navigation
=Ctags=
#+BEGIN_SRC emacs-lisp
;; Goes back after visiting tag
(global-set-key (kbd "M-*") 'pop-tag-mark)
#+END_SRC

=xcscope=
#+BEGIN_SRC emacs-lisp
(use-package xcscope
  :ensure t)

(cscope-setup)
#+END_SRC
*** Whitespace, indentation and style
Enable white-space mode when working with c or c++
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
    (lambda ()
        (when (derived-mode-p 'c-mode 'c++-mode 'lua-mode 'sh-mode)
	    (whitespace-mode 1))))
#+END_SRC

Change the indentation level:
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 8)
#+END_SRC

Gnu Style of C (see [[https://www.emacswiki.org/emacs/IndentingC][here]]):
#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux")
#+END_SRC

*** Code editing
Irony-mode https://syamajala.github.io/c-ide.html
#+BEGIN_SRC emacs-lisp
;; (use-package irony
;;   :ensure t)

;; (add-hook 'c++-mode-hook 'irony-mode)
;; (add-hook 'c-mode-hook 'irony-mode)
;; (add-hook 'objc-mode-hook 'irony-mode)

;; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;; (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
;; (setq company-backends (delete 'company-semantic company-backends))
;; (eval-after-load 'company
;;   '(add-to-list
;;     'company-backends 'company-irony))
#+END_SRC

If you want to enable tab-completion with no delay use the following:
#+BEGIN_SRC emacs-lisp
;;(setq company-idle-delay 0)
;;(define-key c-mode-map [(tab)] 'company-complete)
;;(define-key c++-mode-map [(tab)] 'company-complete)
#+END_SRC

*** Static analyzer
Clang analyzer
#+BEGIN_SRC emacs-lisp
(use-package flycheck-clang-analyzer
  :ensure t
  :after flycheck
  :config (flycheck-clang-analyzer-setup))

(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)

(use-package flycheck-irony
  :ensure t)

(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+END_SRC

** Lua
*** lua mode and static checking
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC

Static checker with flycheck and lua-check
#+BEGIN_SRC emacs-lisp

;; Configuration file for this syntax checker. See Configuration files.
;;defcustom flycheck-luacheckrc¶

;; The luacheck standards to use via one or more --std arguments.
;;defcustom flycheck-luacheck-standards

(add-hook 'lua-mode-hook 'flycheck-mode)

#+END_SRC
*** Whitespace, indenation and style
Indent with tabs by default
#+BEGIN_SRC emacs-lisp
(setq-default lua-indent-level 8 )

(add-hook 'lua-mode-hook (lambda () (setq indent-tabs-mode t)))
#+END_SRC

** Text
#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
	    (id (one-or-more (not (any " "))))
	    (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

#+RESULTS:
** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC

#+RESULTS:

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC
** Docker
Syntax highlighting
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC
* Org-mode settings
** Main

The last four lines define global keys for some commands — please
choose suitable keys yourself.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC

Add timestamp when a certain TODO item was marked DONE [[https://orgmode.org/manual/Closing-items.html][link]]
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

Org-babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '(
   (R . t)
   (shell . t)
))
#+END_SRC

Org mode source blocks - no indentation
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC

** Directories
#+BEGIN_SRC emacs-lisp
(setq crapbag/org-path "~/personal/org/")
(setq crapbag/notes-path "~/personal/notes/")
(setq crapbag/org-inbox-directory (expand-file-name (concat crapbag/org-path "inbox.org")))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp
(when (my-system-is-crapbag)
  (setq org-agenda-files (list crapbag/org-inbox-directory))
)

(when (my-system-is-tandy1000)
  (setq org-agenda-files (list "~/personal/org/tasks.org"
                               "~/personal/org/inbox.org"))
)
#+END_SRC

** Capture
https://stackoverflow.com/questions/11902620/org-mode-how-do-i-create-a-new-file-with-org-capture
#+BEGIN_SRC emacs-lisp
(defun crapbag/capture-report-data-file (path)
  (interactive)
  (let ((name (read-string "Name: ")))
    (expand-file-name (format "%s-%s.org" (format-time-string "%Y%m%d%H%M") name) path)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(when (my-system-is-crapbag)
  (setq org-capture-templates
        '(("i" "Inbox" entry (file+headline crapbag/org-inbox-directory "Inbox") "* TODO %U %? %^G" :prepend t)
          ("z" "Note" entry (file (lambda () (crapbag/capture-report-data-file crapbag/notes-path))) "* %U %? %^G")))
)

(when (my-system-is-tandy1000)
(setq org-capture-templates
      '(("n" "Note" entry (file+headline "~/personal/org/main.org" "Notes") "* %^{Headline}\nCREATED: %U\n")
        ("i" "Inbox" entry (file "~/personal/org/inbox.org") "* TODO %^{Headline}%^g\nCREATED: %U\n")
        ("t" "Task" entry (file "~/personal/org/tasks.org") "* TODO %^{Headline}%^g\n SCHEDULED: %^{Scheduled to begin}t DEADLINE: %^{Deadline}T\nCREATED: %U\n")))

)
#+END_SRC

** Latex previews
#+BEGIN_SRC emacs-lisp
(when (my-system-is-crapbag)
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4))
)
#+END_SRC

** Roam
https://github.com/jethrokuan/org-roam
#+BEGIN_SRC emacs-lisp
(use-package org-roam
      :ensure t
      :if ((my-system-is-crapbag))
      :hook
      (after-init . org-roam-mode)
      :straight (:host github :repo "jethrokuan/org-roam" :branch "develop")
      :custom
      (org-roam-directory "~/personal/org/roam/")
      :bind (:map org-roam-mode-map
              (("C-c n l" . org-roam)
               ("C-c n f" . org-roam-find-file)
               ("C-c n g" . org-roam-show-graph))
              :map org-mode-map
              (("C-c n i" . org-roam-insert))))
#+END_SRC

** Looks
https://zzamboni.org/post/beautifying-org-mode-in-emacs/
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC


#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Elfeed
- RSS and atom reader https://github.com/skeeto/elfeed
- Specific for personal computer https://nicolas.petton.fr/blog/per-computer-emacs-settings.html
- specific elfeed settings from http://pragmaticemacs.com/category/elfeed/

#+BEGIN_SRC emacs-lisp
;; (defvar host (substring (shell-command-to-string "hostname") 0 -1))

;; (if (string= host "crapbag")
;;   (progn (use-package elfeed-org
;; 	   :ensure t
;; 	   :config
;; 	   (elfeed-org)
;; 	   (setq rmh-elfeed-org-files (list "/home/lukas/personal/Documents/Org/elfeed.org")))

;; 	 (use-package elfeed
;; 	   :ensure t))
;;   (print "Different host"))
#+END_SRC

* mu4e

#+BEGIN_SRC emacs-lisp
;; the exact path may differ --- check it
;;(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e/")
;;(require 'mu4e)
#+END_SRC


#+BEGIN_SRC emacs-lisp
  ;; (use-package org-mu4e
  ;;   :ensure t)

  ;; ;;store link to message if in header view, not to header query
  ;; (setq org-mu4e-link-query-in-headers-mode nil)


  ;; ;;location of my maildir
  ;; (setq mu4e-maildir (expand-file-name "~/.mail"))

  ;; ;; ;;command used to get mail
  ;; ;; ;; use this for testing
  ;;  (setq mu4e-get-mail-command "true")
  ;; ;; ;; use this to sync with mbsync
  ;; ;; ;; ;;(setq mu4e-get-mail-command "mbsync gmail")

  ;; ;; ;;rename files when moving
  ;; ;; ;;NEEDED FOR MBSYNC
  ;;  (setq mu4e-change-filenames-when-moving t)

  ;; ;; ;; set up queue for offline email
  ;; ;; ;; use mu mkdir  ~/Maildir/queue to set up first
  ;;  (setq smtpmail-queue-mail nil  ;; start in normal mode
  ;;        smtpmail-queue-dir   "~/.mail/queue/cur")
#+END_SRC
