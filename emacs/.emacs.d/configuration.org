* General
Refresh packages
#+BEGIN_SRC emacs-lisp
(package-refresh-contents)
#+END_SRC

Kill ring memory and connection to system clipboard
#+BEGIN_SRC emacs-lisp
(setq save-interprogram-paste-before-kill t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset 'yes-or-no-p 'y-or-n-p)

  (global-auto-revert-mode 1)
  (setq auto-revert-verbose nil)
  ;; Pressing <f5 reloads the current buffer
  (global-set-key (kbd "<f5>") 'revert-buffer)
  ;; Trailing whitespace
  (setq-default show-trailing-whitespace t)
#+END_SRC

Encoding settings [[http://ergoemacs.org/emacs/emacs_n_unicode.html][link]]
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

Tabs [[https://www.emacswiki.org/emacs/NoTabs][no tabs]]
#+BEGIN_SRC emacs-lisp
 (setq-default indent-tabs-mode t)
#+END_SRC

Whitespace mode
#+BEGIN_SRC emacs-lisp
(progn
 ;; Make whitespace-mode with very basic background coloring for whitespaces.
  ;; http://ergoemacs.org/emacs/whitespace-mode.html
  (setq whitespace-style (quote (face spaces tabs newline space-mark tab-mark newline-mark )))

  ;; Make whitespace-mode and whitespace-newline-mode use “¶” for end of line char and “▷” for tab.
  (setq whitespace-display-mappings
        ;; all numbers are unicode codepoint in decimal. e.g. (insert-char 182 1)
        '(
          (space-mark 32 [183] [46]) ; SPACE 32 「 」, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
          (newline-mark 10 [182 10]) ; LINE FEED,
          (tab-mark 9 [9655 9] [92 9]) ; tab
          )))
#+END_SRC

Try out packages without installing them
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

Bring up help on key combinations
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode))
#+END_SRC

Generate dummy lorem-ipsum text
#+BEGIN_SRC emacs-lisp
  (use-package lorem-ipsum
    :ensure t)
#+END_SRC

* Looks
Highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
#+END_SRC

Highlight parens
#+BEGIN_SRC emacs-lisp
;; Enable paren highlighting
(show-paren-mode 1)

;; highlight brackets
;;(setq show-paren-style 'parenthesis)

;; highlight entire expression
 (setq show-paren-style 'expression)

;; highlight brackets if visible, else entire expression
;; (setq show-paren-style 'mixed)
#+END_SRC

Get rid of the tool and menu bars, scrollbar
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

Display line numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
#+END_SRC

Theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-nord t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+End_SRC

* Navigation and search
Window navigation with =ace-window=
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (progn
      (global-set-key [remap other-window] 'ace-window)
      (custom-set-faces
       '(aw-leading-char-face
         ((t (:inherit ace-jump-face-foreground :height 2.0))))) 
      ))
#+END_SRC

Advanced incremental and reverse search using =swiper= and =counsel=. [[https://cestlaz-nikola.github.io/posts/using-emacs-6-swiper/][link to tutorial]].
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("M-y". counsel-yank-pop) :map ivy-minibuffer-map ("M-y". ivy-next-line)))

  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key "\C-s" 'swiper)
      (global-set-key (kbd "C-c C-r") 'ivy-resume)
      (global-set-key (kbd "<f6>") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
      ))
#+END_SRC

Jump to character. [[https://cestlaz-nikola.github.io/posts/using-emacs-7-avy/][Navigation with Avy]]
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind ("M-s" . avy-goto-char))
#+END_SRC

* Editing, autocomplete spellcheck
Interactive edit. [[https://cestlaz-nikola.github.io/posts/using-emacs-18-narrow/][link to tutorial.]]
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :ensure t)
#+END_SRC

Company mode auto complete
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  ;; :init
  ;; (setq company-idle-delay nil  ; avoid auto completion popup, use TAB
  ;;                               ; to show it
  ;;       company-tooltip-align-annotations t)
  :hook (after-init . global-company-mode)
  :bind
  (:map prog-mode-map
        ("C-i" . company-indent-or-complete-common)
        ("C-M-i" . completion-at-point)))
#+END_SRC

Code checking on the fly with [[https://cestlaz-nikola.github.io/posts/using-emacs-12-python/][flycheck]]
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode t))
#+END_SRC

* Fuzzyfinder
https://github.com/bling/fzf.el
#+BEGIN_SRC emacs-lisp
(use-package fzf
  :ensure t)
#+END_SRC
* Git
Install =Magit= package
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
#+END_SRC

Some =Magit= keybinds
#+BEGIN_SRC emacs-lisp
;; To display information about the current Git repositor
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC

https://emacs.stackexchange.com/questions/43643/magit-how-to-show-differences-within-lines
#+BEGIN_SRC emacs-lisp
(setq magit-diff-refine-hunk (quote all))
#+END_SRC

* Org-mode settings
** Main
The last four lines define global keys for some commands — please
choose suitable keys yourself.
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-switchb)
#+END_SRC

Multi-state workflows [[https://orgmode.org/guide/Multi_002dstate-workflows.html][link]]
#+BEGIN_SRC emacs-lisp
#+END_SRC

Add timestampt when a certain TODO item was marked DONE [[https://orgmode.org/manual/Closing-items.html][link]]
#+BEGIN_SRC emacs-lisp
  (setq org-log-done 'time)
#+END_SRC

To get the nice looking bullets when in org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

Org-babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages '(
   (R . t)
   (shell . t)
))
#+END_SRC


Org mode source blocks - no indentation
#+BEGIN_SRC emacs-lisp
(setq org-src-preserve-indentation t)
#+END_SRC
** Org Capture
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(
        ("t" "PhD::ToDo" entry (file+headline "~/personal/Documents/PhD/Org/main.org" "TODOs") "* TODO %T %?" :prepend t)
        ("n" "PhD::Note" entry (file+headline "~/personal/Documents/PhD/Org/main.org" "Notes") "* %T %?" :prepend t)
        ("1" "personal::ToDo" entry (file+headline "~/personal/Documents/Org/personal.org" "TODOs") "* TODO %T %?" :prepend t)
        ("2" "personal::Note" entry (file+headline "~/personal/Documents/Org/personal.org" "Notes") "* %T %?" :prepend t)
        ))
#+END_SRC
* Compile
https://www.emacswiki.org/emacs/CompileCommand
#+BEGIN_SRC emacs-lisp
(global-set-key "\C-x\C-m" 'compile)
#+END_SRC
* Language specific
** C/C++
*** Code navigation
=Ctags=
#+BEGIN_SRC emacs-lisp
;; Goes back after visiting tag
(global-set-key (kbd "M-*") 'pop-tag-mark)
#+END_SRC

=xcscope=
#+BEGIN_SRC emacs-lisp
(use-package xcscope
  :ensure t)

(cscope-setup)
#+END_SRC
*** Whitespace, indentation and style
Enable white-space mode when working with c or c++
#+BEGIN_SRC emacs-lisp
(add-hook 'c-mode-common-hook
    (lambda ()
        (when (derived-mode-p 'c-mode 'c++-mode 'lua-mode 'sh-mode)
	    (whitespace-mode 1))))
#+END_SRC

Change the indentation level:
#+BEGIN_SRC emacs-lisp
(setq-default c-basic-offset 8)
#+END_SRC

Gnu Style of C (see [[https://www.emacswiki.org/emacs/IndentingC][here]]):
#+BEGIN_SRC emacs-lisp
(setq c-default-style "linux")
#+END_SRC

*** Code editing
Irony-mode https://syamajala.github.io/c-ide.html
#+BEGIN_SRC emacs-lisp
;; (use-package irony
;;   :ensure t)

;; (add-hook 'c++-mode-hook 'irony-mode)
;; (add-hook 'c-mode-hook 'irony-mode)
;; (add-hook 'objc-mode-hook 'irony-mode)

;; (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

;; (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
;; (setq company-backends (delete 'company-semantic company-backends))
;; (eval-after-load 'company
;;   '(add-to-list
;;     'company-backends 'company-irony))
#+END_SRC

If you want to enable tab-completion with no delay use the following:
#+BEGIN_SRC emacs-lisp
;;(setq company-idle-delay 0)
;;(define-key c-mode-map [(tab)] 'company-complete)
;;(define-key c++-mode-map [(tab)] 'company-complete)
#+END_SRC

*** Static analyzer
Clang analyzer
#+BEGIN_SRC emacs-lisp
(use-package flycheck-clang-analyzer
  :ensure t
  :after flycheck
  :config (flycheck-clang-analyzer-setup))

(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)

(use-package flycheck-irony
  :ensure t)

(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
  (use-package lua-mode
    :ensure t)
#+END_SRC

Static checker with flycheck and lua-check
#+BEGIN_SRC emacs-lisp

;; Configuration file for this syntax checker. See Configuration files.
defcustom flycheck-luacheckrc¶



;; The luacheck standards to use via one or more --std arguments.
defcustom flycheck-luacheck-standards




(add-hook 'lua-mode-hook 'flycheck-mode)

#+END_SRC

** Text
#+BEGIN_SRC emacs-lisp
(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
	    (id (one-or-more (not (any " "))))
	    (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)
#+END_SRC

** yaml
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+END_SRC

#+RESULTS:
** json
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t)
#+END_SRC

#+RESULTS:

** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC
** Docker
Syntax highlighting
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :ensure t)
#+END_SRC
